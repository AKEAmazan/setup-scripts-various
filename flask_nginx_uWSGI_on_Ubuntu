#!/bin/bash

# Normally would set flag -eu but this causes a problem with virtualenv
# https://stackoverflow.com/questions/42997258/virtualenv-activate-script-wont-run-in-bash-script-with-set-euo

# Set up a server running a secure instance of Flask on Nginx using uWSGI
# on python3 as per this tutorial:
# https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-16-04

echo what is your domain name?
read domain_name
echo what is the name of your project?
read project_name
envstring="env"
envstring=$project_name$envstring
echo what is the IP address you will be using?
read ip_address

echo updating upgrading and autoremoving
{
    sudo apt update && sudo apt -y upgrade && sudo apt -y autoremove
} > /dev/null 

echo
echo installing python3
{
    sudo apt install -y python3
} > /dev/null
{
    sudo apt install -y python3-dev
} > /dev/null

echo
echo installing pip3
{
    sudo apt install -y python3-pip
} > /dev/null

echo
echo installing nginx
{
    sudo apt install -y nginx
} > /dev/null

echo
echo upgrading pip
{
    sudo pip3 install --upgrade pip
} > /dev/null


echo installing virtualenv
{
    sudo pip3 install virtualenv
} > /dev/null

echo
echo creating and stepping into a folder for the flask project
mkdir ~/$project_name
cd ~/$project_name

echo
echo creating a virtual environment $envstring
virtualenv $envstring

# this breaks if -eu flag is set for bash script
echo activating virtual environment $envstring
source ~/$project_name/$envstring/bin/activate

echo
echo installing uwsgi and flask
{
    pip install uwsgi flask
} > /dev/null

echo
echo Creating placeholder Flask app $project_name.py
cat > $project_name.py <<EOF
from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "<h1>Yo!</h1>"

if __name__ == "__main__":
    app.run(host='0.0.0.0')
EOF

echo opening port 5000 to test application
sudo ufw allow 5000

echo
echo Creating WSGI entry point
cat > wsgi.py <<EOF
from $project_name import app

if __name__ == "__main__":
    app.run()
EOF

echo deactivating virtual environment
deactivate

echo creating uWSGI configuration file
cat > $project_name.ini <<EOF
[uwsgi]
module = wsgi:app

master = true
processes = 5

socket = $project_name.sock
chmod-socket = 660
vacuum = true

die-on-term = true
EOF

echo creating a systemd service file for $project_name
cat > $project_name.service <<EOF
[Unit]
Description=uWSGI instance to serve $project_name
After=network.target

[Service]
User=$USER
Group=www-data
WorkingDirectory=/home/$USER/$project_name
Environment="PATH=/home/$USER/$project_name/$envstring/bin"
ExecStart=/home/$USER/$project_name/$envstring/bin/uwsgi --ini $project_name.ini

[Install]
WantedBy=multi-user.target
EOF

echo
echo moving the service file into /etc/systemd/system
sudo mv $project_name.service /etc/systemd/system/

echo
echo starting and enabling project with systemctl
sudo systemctl start $project_name
sudo systemctl enable $project_name

echo
echo creating an nginx site configuration for $project_name
cat > $project_name <<EOF
server {
    listen 80;
        server_name $ip_address $domain_name;
        return 301 https://\$server_name\$request_uri;
        location ~ /.well-known {
                allow all;
    }

    location / {
        include uwsgi_params;
    uwsgi_pass unix:///home/$USER/$project_name/$project_name.sock;
    }
}

server {
       # SSL config

       listen 443 ssl http2 default_server;
       listen [::]:443 ssl http2 default_server;

       include snippets/ssl-$domain_name.conf;
       include snippets/ssl-params.conf;

    location / {
        include uwsgi_params;
    uwsgi_pass unix:///home/$USER/$project_name/$project_name.sock;
    }
}
EOF

echo moving the nginx config file to /etc/nginx/sites-available
sudo mv /etc/nginx/sites-available/default /etc/nginx/sites-available/defaultBAKFLASK
sudo mv $project_name /etc/nginx/sites-available/$project_name

echo symlinking the config file to /etc/nginx/sites-enabled
sudo ln -s /etc/nginx/sites-available/$project_name /etc/nginx/sites-enabled/

echo
echo retarting nginx
sudo systemctl restart nginx

echo closing port 5000 back up again
sudo ufw delete allow 5000

echo allowing nginx through the firewall. Probably already fine, just in case.
sudo ufw allow 'Nginx Full'

echo
echo go to $domain_name and see what you see now!
